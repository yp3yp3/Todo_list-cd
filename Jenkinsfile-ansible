pipeline {
    agent any
    environment {
        email = 'yp3yp3@gmail.com'

    }
    stages {
        stage('Deploy with terraform') {
            when { changeset "terraform/**" }
              steps {
                withAWS(credentials: 'aws') {
                sh '''
                    
                    cd terraform
                    terraform init
                    terraform plan
                    terraform apply -auto-approve
                '''
                }
            }
            }
            stage('DEBUG git diff') {
  steps {
    sh '''
      cd ansible
      git status
      git status --porcelain inventory.ini
    '''
  }
}
            stage('Push updated inventory to Git') {
                when {
                    expression {
                    return sh(script: '''
                        cd ansible
                        git status --porcelain inventory.ini | grep inventory.ini > /dev/null
                    ''', returnStatus: true) == 0
                    }
                }
             steps {
                withCredentials([usernamePassword(credentialsId: 'github_token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
                sh '''
                    cd ansible

                    git config user.name "jenkins"
                    git config user.email "ci@company.com"

                    git add inventory.ini
                    git commit -m "ðŸ”„ Update inventory from Terraform"
                    git push https://${GIT_USERNAME}:${GIT_TOKEN}@yp3yp3/Todo_list-cd.git main
                '''
                }
            }
            }
        
        stage('Deploy with ansible') {
            when { changeset "ansible/**" }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'node1', keyFileVariable: 'PEM_FILE', usernameVariable: 'SSH_USER')]) {
                    sh '''
                        export ANSIBLE_HOST_KEY_CHECKING=False
                        chmod 400 $PEM_FILE
                        cd ansible
                        ansible-playbook -i inventory.ini playbook.yaml \
                        --private-key $PEM_FILE --user $SSH_USER
                    '''
        }
        }
        
        }
    }
        post {
             failure {
                script {
                    def msg = ''
                    if (env.VERSION && env.ENVIRONMENT) {
                         msg = "FAILED to deploy ${env.ENVIRONMENT} version ${env.VERSION} "
                    } else {
                         msg = "FAILED "
                    }
                
                slackSend(
                    channel: '#jenkins',
                    color: 'danger',
                    message: msg
                )
                
                emailext(
                    subject: "${JOB_NAME}.${BUILD_NUMBER} FAILED",
                    mimeType: 'text/html',
                    to: "$email",
                    body: msg
                )
            }
             }
            success {
                script {
                    def msg = ''
                    if (env.VERSION && env.ENVIRONMENT) {
                          msg = "success to deploy ${env.ENVIRONMENT} version ${env.VERSION}  http://stage.yp3yp3.online/"
                    } else {
                         msg = "success"
                    }
                    
                
                slackSend(
                    channel: '#jenkins',
                    color: 'good',
                    message: msg
                )
                emailext(
                    subject: "${JOB_NAME}.${BUILD_NUMBER} PASSED",
                    mimeType: 'text/html',
                    to: "$email",
                    body: msg
                )
            }
            }
        }
    }
